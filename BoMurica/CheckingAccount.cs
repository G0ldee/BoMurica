//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BoMurica
{
    using BoMurica.BMModels;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;
    using System.Linq;
    using System.Windows;

    public partial class CheckingAccount
    {
        public string Account { get; set; }
        public string ClientID { get; set; }
        public decimal Balance { get; set; }

        internal void SetValues(Account account)
        {
            var count = 0;
            using (BomDBEntities1 bomDb = new BomDBEntities1())
            {
                count = bomDb.CheckingAccounts.Count() + 1;
            }
            this.Account = "CH" + "00" + count;
            this.ClientID = account.ClientId;
            if (account.InitDepositDebt == 0 || account.InitDepositDebt >= 0)
            {
                this.Balance = account.InitDepositDebt;
            }
        }

        internal void AddCheckingAccount()
        {
            using (BomDBEntities1 bomDb = new BomDBEntities1())
            {
                bomDb.CheckingAccounts.Add(this);
                bomDb.SaveChanges();
            }
        }

        internal bool UpdateBalance(decimal balance)
        {
            CreditLineAccount creditLineAccount;
            var diff = this.Balance + balance;
            if (diff > 0)
            {
                using (BomDBEntities1 bomDb = new BomDBEntities1())
                {
                    this.Balance = diff;
                    bomDb.CheckingAccounts.AddOrUpdate(this);
                    bomDb.SaveChanges();
                }
                    return true;
            }
            else if (diff < 0)
            {
                using (BomDBEntities1 bomDb = new BomDBEntities1())
                {
                    creditLineAccount = bomDb.CreditLineAccounts.FirstOrDefault(u => u.ClientID == this.ClientID);
                    if (creditLineAccount != null)
                    {
                        diff = balance - this.Balance;
                        this.Balance = 0.00m;
                        bomDb.CheckingAccounts.AddOrUpdate(this);
                        creditLineAccount.UpdateBalance(-diff);
                        return true;
                    }
                }
                return false;
            }
            else
            {
                return false;
            }
        }
        public virtual ClientInfo ClientInfo { get; set; }
    }
}
